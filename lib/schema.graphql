enum Lang {
  EN
  FR
  ES
}

enum Taxonomy {
  Knowledge
  Comprehension
  Application
  Analysis
  Synthesis
  Evaluation
}

enum AssessType {
  multiChoiceAssessment
  freeTextAssessment
}

enum AssessStatus {
  IN_PROGRESS
  CREATED
  FAILED
  PUBLISHED
}

type Settings {
  uiLang: Lang
  docLang: Lang
  assessType: AssessType
}

input UpsertSettingsInput {
  uiLang: Lang!
  docLang: Lang!
  assessType: AssessType!
}

type Course {
  id: ID!
  name: String
  description: String
}

input CourseInput {
  id: ID
  name: String!
  description: String!
}

type Student {
  id: ID!
  firstName: String!
  lastName: String!
}

type AssessTemplate {
  id: ID!
  name: String
  docLang: Lang
  assessType: AssessType
  taxonomy: Taxonomy
  totalQuestions: Int
  easyQuestions: Int
  mediumQuestions: Int
  hardQuestions: Int
  createdAt: AWSDateTime
}

input AssessTemplateInput {
  name: String
  docLang: Lang!
  assessType: AssessType!
  taxonomy: Taxonomy!
  totalQuestions: Int!
  easyQuestions: Int!
  mediumQuestions: Int!
  hardQuestions: Int!
}

type Rubric {
  weight: Int!
  point: String!
}

input RubricInput {
  weight: Int!
  point: String!
}

type FreeText {
  title: String!
  question: String!
  rubric: [Rubric!]!
}

input FreeTextInput {
  title: String!
  question: String!
  rubric: [RubricInput!]!
}

type MultiChoice {
  title: String!
  question: String!
  answerChoices: [String!]!
  correctAnswer: Int!
  explanation: String!
}

input MultiChoiceInput {
  title: String!
  question: String!
  answerChoices: [String]
  correctAnswer: Int
  explanation: String!
}

type Assessment {
  id: ID!
  name: String!
  courseId: String!
  lectureDate: AWSDate!
  deadline: AWSDate!
  updatedAt: AWSDateTime!
  assessType: AssessType!
  multiChoiceAssessment: [MultiChoice!]
  freeTextAssessment: [FreeText!]
  published: Boolean!
  status: AssessStatus!
  course: Course
}

input AssessmentInput {
  id: ID!
  name: String!
  courseId: String!
  lectureDate: AWSDate!
  deadline: AWSDate!
  assessType: AssessType!
  multiChoiceAssessment: [MultiChoiceInput]
  freeTextAssessment: [FreeTextInput]
  published: Boolean
  status: AssessStatus!
}

type StudentAssessment {
  parentAssessId: ID!
  assessment: Assessment
  answers: AWSJSON!
  completed: Boolean
  score: Int
  report: AWSJSON
  updatedAt: AWSDateTime
}

input StudentAssessmentInput {
  parentAssessId: ID!
  answers: AWSJSON!
  score: Int
  completed: Boolean
}

input GenerateAssessmentInput {
  name: String!
  courseId: String!
  lectureDate: AWSDate!
  deadline: AWSDate!
  locations: [String]!
  assessTemplateId: String
}

type Mutation {
  upsertSettings(input: UpsertSettingsInput): Settings
  upsertCourse(input: CourseInput): Course
  createAssessTemplate(input: AssessTemplateInput): AssessTemplate
  upsertAssessment(input: AssessmentInput): Assessment
  upsertStudentAssessment(input: StudentAssessmentInput): StudentAssessment
  gradeStudentAssessment(input: StudentAssessmentInput): StudentAssessment
}

type Query {
  getSettings: Settings
  listCourses: [Course]
  listStudents: [Student]
  getAssessment(id: ID!): Assessment
  listAssessments: [Assessment]
  listAssessTemplates: [AssessTemplate]
  getStudentAssessment(parentAssessId: ID!): StudentAssessment
  listStudentAssessments: [StudentAssessment]
  listMyStudentAssessments(studentId: ID!): [StudentAssessment]
  publishAssessment(assessmentId: ID!): Boolean
  createKnowledgeBase(courseId: ID, locations: [String]): ID
  generateAssessment(input: GenerateAssessmentInput): ID
}
