enum Lang {
  EN
  FR
  ES
}

enum AssessType {
  MultipleChoiceQuestionnaire
}

enum AssessStatus {
  IN_PROGRESS
  CREATED
  FAILED
  PUBLISHED
}

type Settings {
  uiLang: Lang
  docLang: Lang
  assessType: AssessType
}

input UpsertSettingsInput {
  uiLang: Lang!
  docLang: Lang!
  assessType: AssessType!
}

type Course {
  id: ID!
  name: String
  description: String
}

input CourseInput {
  id: ID
  name: String!
  description: String!
}

type Student {
  id: ID!
  firstName: String
  lastName: String
}

type AssessTemplate {
  id: ID!
  name: String
  docLang: Lang
  assessType: AssessType
  totalQuestions: Int
  easyQuestions: Int
  mediumQuestions: Int
  hardQuestions: Int
  createdAt: AWSDateTime
}

input AssessTemplateInput {
  name: String
  docLang: Lang!
  assessType: AssessType!
  totalQuestions: Int!
  easyQuestions: Int!
  mediumQuestions: Int!
  hardQuestions: Int!
}

type QandA {
  title: String!
  question: String!
  answers: [String!]!
  correctAnswer: Int!
  explanation: String!
}

input QandAInput {
  title: String!
  question: String!
  answers: [String]!
  correctAnswer: Int!
  explanation: String!
}

type Assessment {
  id: ID!
  name: String!
  course: String!
  lectureDate: AWSDate!
  deadline: AWSDate!
  updatedAt: AWSDateTime!
  questions: [QandA!]!
  published: Boolean!
  status: AssessStatus!
}

input AssessmentInput {
  id: ID!
  name: String!
  course: String!
  lectureDate: AWSDate!
  deadline: AWSDate!
  questions: [QandAInput!]!
  published: Boolean
  status: AssessStatus!
}

type StudentAssessment {
  parentAssessId: ID!
  assessment: Assessment
  answers: [Int]
  completed: Boolean
  score: Int
  updatedAt: AWSDateTime
}

input StudentAssessmentInput {
  parentAssessId: ID!
  answers: [Int]
  score: Int
  completed: Boolean
}

input GenerateAssessmentInput {
  name: String!
  courseId: String!
  lectureDate: AWSDate!
  deadline: AWSDate!
  locations: [String]!
  assessTemplateId: String
}

type Mutation {
  upsertSettings(input: UpsertSettingsInput): Settings
  upsertCourse(input: CourseInput): Course
  createAssessTemplate(input: AssessTemplateInput): AssessTemplate
  upsertAssessment(input: AssessmentInput): Assessment
  upsertStudentAssessment(input: StudentAssessmentInput): StudentAssessment
}

type Query {
  getSettings: Settings
  listCourses: [Course]
  listStudents: [Student]
  getAssessment(id: ID!): Assessment
  listAssessments: [Assessment]
  listAssessTemplates: [AssessTemplate]
  getStudentAssessment(parentAssessId: ID!): StudentAssessment
  listStudentAssessments: [StudentAssessment]
  publishAssessment(assessmentId: ID!): Boolean
  createKnowledgeBase(courseId: ID, locations: [String]): ID
  generateAssessment(input: GenerateAssessmentInput): ID
}
