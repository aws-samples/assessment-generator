enum Lang {
  EN
  FR
  ES
}

enum AssessType {
  Type1
  Type2
  Type3
}

enum AssessmentStatus {
  Start
  InProgress
  Completed
}

type Settings {
  uiLang: Lang
  docLang: Lang
  assessType: AssessType
}

input UpsertSettingsInput {
  uiLang: Lang!
  docLang: Lang!
  assessType: AssessType!
}

type Coarse {
  id: ID!
  name: String
  description: String
}

type Class {
  id: ID!
  name: String
  students: [String]
}

type Student {
  id: ID!
  firstName: String
  lastName: String
}

type AssessTemplate {
  id: ID!
  name: String
  docLang: Lang
  assessType: AssessType
  totalQuestions: Int
  easyQuestions: Int
  mediumQuestions: Int
  hardQuestions: Int
  createdAt: AWSDateTime
}

input AssessTemplateInput {
  name: String
  docLang: Lang!
  assessType: AssessType!
  totalQuestions: Int!
  easyQuestions: Int!
  mediumQuestions: Int!
  hardQuestions: Int!
}

type QandA {
  title: String!
  question: String!
  answers: [String!]!
  correctAnswer: Int!
}

input QandAInput {
  title: String
  question: String
  answers: [String]
  correctAnswer: Int!
}

type Assessment {
  id: ID!
  name: String
  coarse: String
  lectureDate: AWSDateTime
  deadline: AWSDateTime
  updatedAt: AWSDateTime
  questions: [QandA!]!
}

input AssessmentInput {
  id: ID!
  name: String!
  coarse: String!
  lectureDate: AWSDateTime!
  deadline: AWSDateTime!
  questions: [QandAInput]!
}

type StudentAssessment {
  parentAssessId: ID!
  assessment: Assessment
  answers: [Int]
  status: AssessmentStatus
  score: Int
  createdAt: AWSDateTime
}

input StudentAssessmentInput {
  parentAssessId: ID!
  answers: [Int]
  score: Int
  status: AssessmentStatus
}

type Mutation {
  upsertSettings(input: UpsertSettingsInput): Settings
  createAssessTemplate(input: AssessTemplateInput): AssessTemplate
  upsertAssessment(input: AssessmentInput): Assessment
  upsertStudentAssessment(input: StudentAssessmentInput): StudentAssessment
}

type Query {
  getSettings: Settings
  listCoarses: [Coarse]
  listClasses: [Class]
  listStudents: [Student]
  getAssessment(id: ID!): Assessment
  listAssessments: [Assessment]
  getStudentAssessment(parentAssessId: ID!): StudentAssessment
  listStudentAssessments: [StudentAssessment]
}
